Digraph AST
{
label = "AST_Graph.gv"
node0 [label ="PROGRAM_NODE"]
node1 [label ="DECLARATION_NODE FUNCTION_DECL"]
node2 [label ="IDENTIFIER_NODE float NORMAL_ID"]
node3 [label ="IDENTIFIER_NODE foo NORMAL_ID"]
node4 [label ="PARAM_LIST_NODE"]
node5 [label ="BLOCK_NODE"]
node6 [label ="VARIABLE_DECL_LIST_NODE"]
node7 [label ="DECLARATION_NODE VARIABLE_DECL"]
node8 [label ="IDENTIFIER_NODE float NORMAL_ID"]
node9 [label ="IDENTIFIER_NODE a NORMAL_ID"]
node8 -> node9 [style = dashed]
node7 -> node8 [style = bold]
node6 -> node7 [style = bold]
node10 [label ="STMT_LIST_NODE"]
node11 [label ="STMT_NODE RETURN_STMT"]
node12 [label ="IDENTIFIER_NODE a NORMAL_ID"]
node11 -> node12 [style = bold]
node10 -> node11 [style = bold]
node6 -> node10 [style = dashed]
node5 -> node6 [style = bold]
node4 -> node5 [style = dashed]
node3 -> node4 [style = dashed]
node2 -> node3 [style = dashed]
node1 -> node2 [style = bold]
node13 [label ="DECLARATION_NODE FUNCTION_DECL"]
node14 [label ="IDENTIFIER_NODE int NORMAL_ID"]
node15 [label ="IDENTIFIER_NODE main NORMAL_ID"]
node16 [label ="PARAM_LIST_NODE"]
node17 [label ="BLOCK_NODE"]
node18 [label ="VARIABLE_DECL_LIST_NODE"]
node19 [label ="DECLARATION_NODE VARIABLE_DECL"]
node20 [label ="IDENTIFIER_NODE float NORMAL_ID"]
node21 [label ="IDENTIFIER_NODE a NORMAL_ID"]
node20 -> node21 [style = dashed]
node19 -> node20 [style = bold]
node18 -> node19 [style = bold]
node22 [label ="STMT_LIST_NODE"]
node23 [label ="STMT_NODE ASSIGN_STMT"]
node24 [label ="IDENTIFIER_NODE a NORMAL_ID"]
node25 [label ="STMT_NODE FUNCTION_CALL_STMT"]
node26 [label ="IDENTIFIER_NODE foo NORMAL_ID"]
node27 [label ="NUL_NODE"]
node26 -> node27 [style = dashed]
node25 -> node26 [style = bold]
node24 -> node25 [style = dashed]
node23 -> node24 [style = bold]
node22 -> node23 [style = bold]
node18 -> node22 [style = dashed]
node17 -> node18 [style = bold]
node16 -> node17 [style = dashed]
node15 -> node16 [style = dashed]
node14 -> node15 [style = dashed]
node13 -> node14 [style = bold]
node1 -> node13 [style = dashed]
node0 -> node1 [style = bold]
}
