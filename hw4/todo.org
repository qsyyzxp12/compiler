* find semenatic errors
1. should not stop at the first violation found
2. the function header always appear before calling
* output format
** correct(ok)
"Parsing completed. No errors found."
** violation(ok)
"Error found in line# "
<Additional error message>
* Type Conversion
will be enforced in the code generation phase
no need to do in this homework.
** a. Assignment Conversions
*** the types of the expressions on the left and right sides should be the same
*** If they are not, try to convert right type to left type
*** you can simply assume such conversion will be enforced in code generation(???)
** b. Binary Conversions
*** integer value must be converted to the float type first
** c. Function Arguments Conversions
*** When function call's type different to function declaration, value should be converted before pass to function
* Error Format
** 1. Variable declarations(ok, test)
*** Every variable must be declared explicitly
message: "ID <name> undeclared."
*** A name (a variable, a function or a type) cannot be declared more than once in the same scope (global or local)
message: "ID <name> redeclared."
** 2. Functions and function calls(ok, test)
*** correct number of function parameters
message: “Too few arguments to function <name>.”    “Too many arguments to function <name>.”
*** return a value of the defined type
message: “Incompatible return type.” 
Should be a warning message rather than an error message since C supports type coercion for function returns
** 3. Array references(ok, test)
*** Array references, except for actual parameters in function calls, must match their declared dimensions.
message: "Incompatible array dimensions."
*** There is no need to check for array bounds. However, the array index expression must be integer.
message: "Array subscript is not an integer” 
*** An array name cannot be passed to a scalar formal parameter, and a scalar variable cannot be passed to an array formal parameter.
message: "Array <name> passed to scalar parameter <name>." or "Scalar <name> passed to array parameter <name>."

int funct1(int a[][10]) { …}
int funct2(int a) { …}

int i,j,k,a[10][10][10], x[10];

i = funct1(x[j][5]);
/* Array reference x[j][5] is invalid */

j = funct1(a[0][1][1]);
/* passing an array element (i.e. a scalar) to funct1(). Since funct1() is expecting an array parameter,
this is a type mismatch and an ERROR */
** Bonus: Any additional type errors 
you must specify and attach test cases
* misc
** identifier names -- not exceed 64 characters
** distinct identifiers -- unlimited
* files to write
** parser.y
evaluation, action(scope++)
p.31
** symboltable.c
implementation of symboltable
** semenaticAnalysis.c
check semantic errors




* para.c
** DONE write undeclared
CLOSED: [2015-12-08 二 18:16]
** DONE a[2.2] array_size_not_int 
CLOSED: [2015-12-08 二 18:16]
** DONE fun(b[3]) incompatable type
CLOSED: [2015-12-09 三 00:49]
** DONE return 0
CLOSED: [2015-12-08 二 18:16]
* fun.c
** DONE f(), f(1, 2)
CLOSED: [2015-12-08 二 18:17]
** DONE return type test
CLOSED: [2015-12-09 三 00:22]
* variable.c
** DONE a redeclared
CLOSED: [2015-12-08 二 18:17]
** DONE c undeclared assign
CLOSED: [2015-12-08 二 18:17]
